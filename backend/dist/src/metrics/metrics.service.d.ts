export interface MetricLabels {
    method?: string;
    route?: string;
    status_code?: string;
    framework?: string;
    agent_id?: string;
    workflow_id?: string;
    execution_id?: string;
    organization_id?: string;
    user_id?: string;
    [key: string]: string | undefined;
}
export declare class MetricsService {
    private httpRequestTotal;
    private httpRequestDuration;
    private httpRequestsInFlight;
    private activeUsers;
    private totalOrganizations;
    private totalAgents;
    private totalWorkflows;
    private frameworkRequestsTotal;
    private frameworkRequestDuration;
    private frameworkErrorsTotal;
    private agentExecutionsTotal;
    private agentExecutionDuration;
    private agentExecutionErrors;
    private workflowExecutionsTotal;
    private workflowExecutionDuration;
    private workflowExecutionErrors;
    private databaseConnections;
    private databaseQueryDuration;
    private authAttemptsTotal;
    private authFailuresTotal;
    constructor();
    private initializeMetrics;
    private startDefaultMetrics;
    incrementHttpRequests(method: string, route: string, statusCode: string): void;
    recordHttpRequestDuration(method: string, route: string, statusCode: string, duration: number): void;
    setHttpRequestsInFlight(method: string, count: number): void;
    setActiveUsers(count: number): void;
    setTotalOrganizations(count: number): void;
    setTotalAgents(framework: string, status: string, count: number): void;
    setTotalWorkflows(status: string, count: number): void;
    incrementFrameworkRequests(framework: string, operation: string): void;
    recordFrameworkRequestDuration(framework: string, operation: string, duration: number): void;
    incrementFrameworkErrors(framework: string, errorType: string): void;
    incrementAgentExecutions(agentId: string, framework: string, status: string): void;
    recordAgentExecutionDuration(agentId: string, framework: string, duration: number): void;
    incrementAgentExecutionErrors(agentId: string, framework: string, errorType: string): void;
    incrementWorkflowExecutions(workflowId: string, status: string): void;
    recordWorkflowExecutionDuration(workflowId: string, duration: number): void;
    incrementWorkflowExecutionErrors(workflowId: string, errorType: string): void;
    setDatabaseConnections(count: number): void;
    recordDatabaseQueryDuration(operation: string, table: string, duration: number): void;
    incrementAuthAttempts(method: string, result: string): void;
    incrementAuthFailures(method: string, reason: string): void;
    getMetrics(): Promise<string>;
    getRegistry(): Promise<import("prom-client").Registry<"text/plain; version=0.0.4; charset=utf-8">>;
    resetMetrics(): void;
}
