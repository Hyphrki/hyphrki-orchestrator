version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: orchestrator-postgres
    environment:
      POSTGRES_DB: orchestrator
      POSTGRES_USER: orchestrator
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U orchestrator -d orchestrator"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    container_name: orchestrator-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: orchestrator-backend
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://orchestrator:password@postgres:5432/orchestrator
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=dev-jwt-secret-key-change-in-production
      - PORT=3001
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: npm run start:dev

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: orchestrator-frontend
    environment:
      - VITE_API_URL=http://localhost:3001
      - VITE_WS_URL=ws://localhost:3001
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend

  langgraph:
    build:
      context: ./docker/langgraph
      dockerfile: Dockerfile
    container_name: orchestrator-langgraph
    environment:
      - REDIS_URL=redis://redis:6379
      - LANGGRAPH_PORT=8001
    ports:
      - "8001:8001"
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - langgraph_data:/app/data
    healthcheck:
      test: ["CMD", "python", "-c", "import langgraph; print('ready')"]
      interval: 30s
      timeout: 10s
      retries: 3

  agno:
    build:
      context: ./docker/agno
      dockerfile: Dockerfile
    container_name: orchestrator-agno
    environment:
      - REDIS_URL=redis://redis:6379
      - AGNO_PORT=8002
    ports:
      - "8002:8002"
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - agno_data:/app/data
    healthcheck:
      test: ["CMD", "python", "-c", "import agno; print('ready')"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  crewai:
    build:
      context: ./docker/crewai
      dockerfile: Dockerfile
    container_name: orchestrator-crewai
    environment:
      - REDIS_URL=redis://redis:6379
      - CREWAI_PORT=8003
    ports:
      - "8003:8003"
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - crewai_data:/app/data
    healthcheck:
      test: ["CMD", "python", "-c", "import crewai; print('ready')"]
      interval: 30s
      timeout: 10s
      retries: 3

  n8n:
    build:
      context: ./docker/n8n
      dockerfile: Dockerfile
    container_name: orchestrator-n8n
    environment:
      - REDIS_URL=redis://redis:6379
      - N8N_PORT=8004
    ports:
      - "8004:8004"
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - n8n_data:/app/data
    healthcheck:
      test: ["CMD", "node", "-e", "console.log('ready')"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:
  langgraph_data:
  agno_data:
  crewai_data:
  n8n_data:

networks:
  default:
    name: orchestrator-network
