name: hyphrki-orchestrator
region: nyc

databases:
- cluster_name: hyphrki-db
  db_name: hyphrki_platform
  engine: PG
  name: hyphrki-postgres
  production: true

services:
# Backend API Service - All other services depend on this
- name: backend
  environment_slug: node-js
  github:
    branch: main
    deploy_on_push: true
    repo: Hyphrki/hyphrki-orchestrator
  source_dir: backend
  build_command: npm install && npx prisma generate && npm run build
  run_command: npm run start:prod
  http_port: 3001
  instance_count: 1
  instance_size_slug: basic-xxs
  envs:
  - key: NODE_ENV
    scope: RUN_AND_BUILD_TIME
    value: production
  - key: PORT
    scope: RUN_AND_BUILD_TIME
    value: "3001"
  # Dynamic database connection - uses DigitalOcean variable
  - key: DATABASE_URL
    scope: RUN_AND_BUILD_TIME
    value: ${hyphrki-postgres.DATABASE_URL}
  - key: JWT_SECRET
    scope: RUN_AND_BUILD_TIME
    type: SECRET
    value: EV[1:XAtvWNj5mfRrUgUOSX5ucA8s+LTtEivl:yCJbyJbQSLqnTKTd4KkSIQ==]
  - key: JWT_REFRESH_SECRET
    scope: RUN_AND_BUILD_TIME
    type: SECRET
    value: EV[1:pJ5ZRUHZ0xA9m4/74Q3luN4MBfBPu1Zl:W6eEjGvGzcIoFYkJmMcpYA==]
  - key: REDIS_HOST
    scope: RUN_AND_BUILD_TIME
    value: hyphrki-redis-do-user-26543124-0.d.db.ondigitalocean.com
  - key: REDIS_PORT
    scope: RUN_AND_BUILD_TIME
    value: "25061"
  - key: REDIS_PASSWORD
    scope: RUN_AND_BUILD_TIME
    type: SECRET
    value: EV[1:7yCZRLicPA26l2FtD/r1CIysp5lpoqep:OZ/5dmH4oOpKUunUO5mYgCR2SYliTi8mGn5ZW0bqPks3HY5oOKOC0w==]
  - key: JWT_EXPIRES_IN
    scope: RUN_AND_BUILD_TIME
    value: "1h"
  - key: JWT_REFRESH_EXPIRES_IN
    scope: RUN_AND_BUILD_TIME
    value: "7d"

# N8N Workflow Engine - Dynamically connects to database
- name: n8n
  github:
    branch: main
    deploy_on_push: true
    repo: Hyphrki/hyphrki-orchestrator
  dockerfile_path: Dockerfile.n8n
  instance_count: 1
  instance_size_slug: basic-xs
  envs:
  - key: N8N_HOST
    scope: RUN_TIME
    value: 0.0.0.0
  - key: N8N_PORT
    scope: RUN_TIME
    value: "5678"
  - key: N8N_PROTOCOL
    scope: RUN_TIME
    value: https
  # Dynamic webhook URL
  - key: WEBHOOK_URL
    scope: RUN_TIME
    value: ${_self.PUBLIC_URL}
  - key: N8N_BASIC_AUTH_ACTIVE
    scope: RUN_TIME
    value: "true"
  - key: N8N_BASIC_AUTH_USER
    scope: RUN_TIME
    value: admin
  - key: N8N_BASIC_AUTH_PASSWORD
    scope: RUN_TIME
    type: SECRET
    value: EV[1:7yCZRLicPA26l2FtD/r1CIysp5lpoqep:OZ/5dmH4oOpKUunUO5mYgCR2SYliTi8mGn5ZW0bqPks3HY5oOKOC0w==]
  # Dynamic database connection - all use the same variables
  - key: DB_TYPE
    scope: RUN_TIME
    value: postgresdb
  - key: DB_POSTGRESDB_DATABASE
    scope: RUN_TIME
    value: ${hyphrki-postgres.DATABASE}
  - key: DB_POSTGRESDB_HOST
    scope: RUN_TIME
    value: ${hyphrki-postgres.HOSTNAME}
  - key: DB_POSTGRESDB_PORT
    scope: RUN_TIME
    value: ${hyphrki-postgres.PORT}
  - key: DB_POSTGRESDB_USER
    scope: RUN_TIME
    value: ${hyphrki-postgres.USERNAME}
  - key: DB_POSTGRESDB_PASSWORD
    scope: RUN_TIME
    type: SECRET
    value: ${hyphrki-postgres.PASSWORD}

static_sites:
# Frontend - Dynamically references backend URL
- name: frontend
  github:
    branch: main
    deploy_on_push: true
    repo: Hyphrki/hyphrki-orchestrator
  source_dir: frontend
  build_command: npm install --legacy-peer-deps && npm run build
  output_dir: dist
  environment_slug: node-js
  envs:
  # Dynamic backend URL - automatically uses backend component's URL
  - key: VITE_API_URL
    scope: BUILD_TIME
    value: ${backend.PUBLIC_URL}
  - key: VITE_WS_URL
    scope: BUILD_TIME
    value: wss://${backend.PRIVATE_URL}

ingress:
  rules:
  # Backend API routes
  - component:
      name: backend
    match:
      path:
        prefix: /api
  - component:
      name: backend
    match:
      path:
        prefix: /auth
  - component:
      name: backend
    match:
      path:
        prefix: /agents
  - component:
      name: backend
    match:
      path:
        prefix: /workflows
  - component:
      name: backend
    match:
      path:
        prefix: /executions
  - component:
      name: backend
    match:
      path:
        prefix: /deployments
  - component:
      name: backend
    match:
      path:
        prefix: /metrics
  - component:
      name: backend
    match:
      path:
        prefix: /analytics
  - component:
      name: backend
    match:
      path:
        prefix: /users
  - component:
      name: backend
    match:
      path:
        prefix: /admin
  # N8N routes
  - component:
      name: n8n
    match:
      path:
        prefix: /n8n
  # Frontend - catch all (must be last)
  - component:
      name: frontend
    match:
      path:
        prefix: /
